package lexer

import "testing"
import "neobc/token"

// Write Unit tests for all Possible values to check Lexer and it's methods to the best extent possible
func TestLexer(t *testing.T) {
	lexerInputs := []string{"let a = 5;" /*0*/, "let b = 10;" /*1*/, "let c = a + b;" /*2*/, "let d = a - b;" /*3*/, "let e = a * b;" /*4*/, "let f = a / b;" /*5*/, "let g = a % b;" /*6*/, "let h = a == b;" /*7*/, "let i = a != b;" /*8*/, "let j = a < b;" /*9*/, "let k = a > b;" /*10*/, "let l = a <= b;" /*11*/, "let m = a >= b;" /*12*/, "let n = a, b;" /*13*/, "let o = {" /*14*/, "let p = }" /*15*/, "let q = (" /*16*/, "let r = )" /*17*/, "let s = [" /*18*/, "let t = ]" /*19*/, "let u = !a;" /*20*/, "let v = !b;" /*21*/, "let w = !c;" /*22*/, "let x = !d;" /*23*/, "let y = !e;" /*24*/, "let z = !f;" /*25*/}
	lexerAndExpectedInputMap := map[*Lexer][]token.Token{
		NewLexer(lexerInputs[0]):  {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "a", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.NUMBER, Literal: "5", Position: 8, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 9, Line: 1}},
		NewLexer(lexerInputs[1]):  {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "b", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.NUMBER, Literal: "10", Position: 8, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 10, Line: 1}},
		NewLexer(lexerInputs[2]):  {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "c", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "a", Position: 8, Line: 1}, token.Token{Type: token.PLUS, Literal: "+", Position: 10, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "b", Position: 12, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 13, Line: 1}},
		NewLexer(lexerInputs[3]):  {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "d", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "a", Position: 8, Line: 1}, token.Token{Type: token.MINUS, Literal: "-", Position: 10, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "b", Position: 12, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 13, Line: 1}},
		NewLexer(lexerInputs[4]):  {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "e", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "a", Position: 8, Line: 1}, token.Token{Type: token.ASTERISK, Literal: "*", Position: 10, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "b", Position: 12, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 13, Line: 1}},
		NewLexer(lexerInputs[5]):  {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "f", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "a", Position: 8, Line: 1}, token.Token{Type: token.SLASH, Literal: "/", Position: 10, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "b", Position: 12, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 13, Line: 1}},
		NewLexer(lexerInputs[6]):  {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "g", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "a", Position: 8, Line: 1}, token.Token{Type: token.MOD, Literal: "%", Position: 10, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "b", Position: 12, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 13, Line: 1}},
		NewLexer(lexerInputs[7]):  {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "h", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "a", Position: 8, Line: 1}, token.Token{Type: token.EQUALS, Literal: "==", Position: 10, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "b", Position: 13, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 14, Line: 1}},
		NewLexer(lexerInputs[8]):  {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "i", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "a", Position: 8, Line: 1}, token.Token{Type: token.NOT_EQUALS, Literal: "!=", Position: 11, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "b", Position: 13, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 14, Line: 1}},
		NewLexer(lexerInputs[9]):  {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "j", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "a", Position: 8, Line: 1}, token.Token{Type: token.LESS_THAN, Literal: "<", Position: 10, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "b", Position: 12, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 13, Line: 1}},
		NewLexer(lexerInputs[10]): {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "k", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "a", Position: 8, Line: 1}, token.Token{Type: token.GREATER_THAN, Literal: ">", Position: 10, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "b", Position: 12, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 13, Line: 1}},
		NewLexer(lexerInputs[11]): {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "l", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "a", Position: 8, Line: 1}, token.Token{Type: token.LESS_THAN_OR_EQUAL, Literal: "<=", Position: 11, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "b", Position: 13, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 14, Line: 1}},
		NewLexer(lexerInputs[12]): {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "m", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "a", Position: 8, Line: 1}, token.Token{Type: token.GREATER_THAN_OR_EQUAL, Literal: ">=", Position: 11, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "b", Position: 13, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 14, Line: 1}},
		NewLexer(lexerInputs[13]): {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "n", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "a", Position: 8, Line: 1}, token.Token{Type: token.COMMA, Literal: ",", Position: 9, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "b", Position: 11, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 12, Line: 1}},
		NewLexer(lexerInputs[14]): {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "o", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.LEFT_CURLY, Literal: "{", Position: 8, Line: 1}},
		NewLexer(lexerInputs[15]): {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "p", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.RIGHT_CURLY, Literal: "}", Position: 8, Line: 1}},
		NewLexer(lexerInputs[16]): {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "q", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.LEFT_PAREN, Literal: "(", Position: 8, Line: 1}},
		NewLexer(lexerInputs[17]): {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "r", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.RIGHT_PAREN, Literal: ")", Position: 8, Line: 1}},
		NewLexer(lexerInputs[18]): {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "s", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.LEFT_BRACKET, Literal: "[", Position: 8, Line: 1}},
		NewLexer(lexerInputs[19]): {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "t", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.RIGHT_BRACKET, Literal: "]", Position: 8, Line: 1}},
		NewLexer(lexerInputs[20]): {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "u", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.BANG, Literal: "!", Position: 8, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "a", Position: 9, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 10, Line: 1}},
		NewLexer(lexerInputs[21]): {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "v", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.BANG, Literal: "!", Position: 8, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "b", Position: 9, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 10, Line: 1}},
		NewLexer(lexerInputs[22]): {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "w", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.BANG, Literal: "!", Position: 8, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "c", Position: 9, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 10, Line: 1}},
		NewLexer(lexerInputs[23]): {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "x", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.BANG, Literal: "!", Position: 8, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "d", Position: 9, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 10, Line: 1}},
		NewLexer(lexerInputs[24]): {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "y", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.BANG, Literal: "!", Position: 8, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "e", Position: 9, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 10, Line: 1}},
		NewLexer(lexerInputs[25]): {token.Token{Type: token.LET, Literal: "let", Position: 0, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "z", Position: 4, Line: 1}, token.Token{Type: token.ASSIGN, Literal: "=", Position: 6, Line: 1}, token.Token{Type: token.BANG, Literal: "!", Position: 8, Line: 1}, token.Token{Type: token.VARIABLE, Literal: "f", Position: 9, Line: 1}, token.Token{Type: token.SEMICOLON, Literal: ";", Position: 10, Line: 1}},
	}
	for k, v := range lexerAndExpectedInputMap {
		t.Logf("Testing Lexer : %v", k.input)
		for _, tok := range v {
			testToken(t, tok, k.NextToken())
		}
	}
}

func testToken(t *testing.T, expectedToken token.Token, receivedToken token.Token) {
	if expectedToken.Type != receivedToken.Type {
		t.Logf("Expected : %v, Got : %v", expectedToken, receivedToken)
		t.Errorf("Expected Token Type %v, but received %v", expectedToken.Type, receivedToken.Type)
	}
	if expectedToken.Literal != receivedToken.Literal {
		t.Logf("Expected : %v, Got : %v", expectedToken, receivedToken)
		t.Errorf("Expected Token Value %v, but received %v", expectedToken.Literal, receivedToken.Literal)
	}
	if expectedToken.Position != receivedToken.Position {
		t.Logf("Expected : %v, Got : %v", expectedToken, receivedToken)
		t.Errorf("Expected Token Position %v, but received %v", expectedToken.Position, receivedToken.Position)
	}
	if expectedToken.Line != receivedToken.Line {
		t.Logf("Expected : %v, Got : %v", expectedToken, receivedToken)
		t.Errorf("Expected Token Line %v, but received %v", expectedToken.Line, receivedToken.Line)
	}
}
